/*******************************************************************/
/*    Copyright (c) 1989-2020 by Spatial Corp.                     */
/*    All rights reserved.                                         */
/*    Protected by U.S. Patents 5,257,205; 5,351,196; 6,369,815;   */
/*                              5,982,378; 6,462,738; 6,941,251    */
/*    Protected by European Patents 0503642; 69220263.3            */
/*    Protected by Hong Kong Patent 1008101A                       */
/*******************************************************************/

// Header for FileInfo class
#if !defined( FILEINFO_CLASS )
#define FILEINFO_CLASS

#include "dcl_kern.h"
#include "mmgr.hxx"

// Define symbols for setting save file header info

// Jeff - Symbol clash with FileId in windows header.
// Use FileIdent instead and define NO_FILEID_DEFINE


#define	FileIdent	0x01	// Product Identifier
#define FileUnits	0x02	// Model Units

// Class containing additional file header information

/**
 * @file fileinfo.hxx
 * @CAA2Level L1
 * @CAA2Usage U1
 * \addtogroup ACISSAVERESTORE
 *
 * @{
 */

/**
 * Contains additional required file header information.
 * <br>
 * <b>Role:</b> Contains additional file header information, such as <tt>ID</tt> of the
 * product used to save the model, <tt>ACIS</tt> version, millimeters per model unit,
 * date model was saved, <tt>ACIS</tt> save file version, and other relevant model data.
 * <br><br>
 * Beginning with <tt>ACIS</tt> Release <tt>6.3</tt>, it is required that the product <tt>ID</tt> and units
 * scale be populated for the file header before you can save a <tt>SAT</tt> file,
 * regardless of the save file version. If you do not set both of these data,
 * <tt>ACIS</tt> will generate an error. Refer to the <tt>set_product_id</tt> and <tt>set_units</tt> methods
 * of this class.
 */
class DECL_KERN FileInfo : public ACIS_OBJECT
{
private:
	char	*Prod;		// ID for product which saved model
	char	*AVers;		// ACIS version used by product
	double	Units;		// Millimeters per model unit
	char	*Date;		// Date model saved
	int		FVers;		// ACIS save file version
	double	Tol_abs;	// Value of SPAresabs when model saved
	double	Tol_nor;	// Value of SPAresnor when model saved

public:
	// Default constructor
/**
 * C++ allocation constructor requests memory for this object but does not populate it.
 */
	FileInfo();

	// Copy constructor
/**
 * C++ copy constructor requests memory for this object and populates it with the data from the object supplied as an argument.
 * <br><br>
 * @param finfo
 * file name.
 */
	FileInfo(FileInfo const &finfo);

	// Destructor
/**
 * C++ destructor for FileInfo which deallocates memory.
 */
	~FileInfo();

	// Assignment operator
/**
 * Performs an assignment operation.
 * <br><br>
 * @param finfo
 * file name.
 */
	FileInfo &operator=(FileInfo const &finfo);

	// Save/Restore (The whole purpose of the class!)
/**
 * Saves the product <tt>ID</tt>, version, time, units, <tt>SPAresabs</tt> and <tt>SPAresnor</tt>.
 */
	void save();
/**
 * Restores the file information from a save file.
 * <br><br>
 * <b>Role</b>:
 * <br><pre>
 * if (restore_version_number >= FILEINFO_VERSION)
 * 	read_string			Product
 * 	read_string			ACIS Version
 * 	read_string			Date
 * 	read_real			Units
 * 	read_real			Tolerance, abs
 * 	read_real			Tolerance, nor
* </pre>
 */
	void restore();

	// Routine to reset values to defaults
/**
 * Resets the values to the default settings for the file information.
 */
	void reset();
/**
 * Routine to reset the values for the file information to the default values.
 */
	void reset_vars();

	// Routine to check the values of the units and product id
/**
 * Checks the values of the units and product id.
 */
	void valid();

	// Individual data setting routines
	// (Other values cannot be set - They are not used during save)
/**
 * Sets the product <tt>ID</tt>.
 * <br><br>
 * <b>Role:</b> The product <tt>ID</tt> can be any string greater than <tt>4</tt> characters.
 * Spatial recommends that the string contain your product name and the product
 * version, so that <tt>SAT</tt> files generated by your product can be easily identified.
 * <br><br>
 * Beginning with <tt>ACIS</tt> Release <tt>6.3</tt>, it is required that the product <tt>ID</tt> and units
 * scale be populated for the file header before you can save a <tt>SAT</tt> file.
* <br><br>
 * @param id
 * ID.
 */
	void set_product_id(const char * id);
/**
 * Sets the model units scale (in millimeters).
 * <br><br>
 * <b>Role:</b> Sets the scale to the appropriate units for your product
 * <tt>(1.0</tt> indicates that <tt>1</tt> unit equals <tt>1</tt> millimeter).
 * <br><br>
 * Beginning with <tt>ACIS</tt> Release <tt>6.3</tt>, it is required that the product <tt>ID</tt> and units
 * scale be populated for the file header before you can save a <tt>SAT</tt> file.
 * <br><br>
 * @param count
 * number of millimeters.
 */
	void set_units(double count);

	// Copy selected fields from another instance
/**
 * Copies selected fields from another instance.
 * <br><br>
 * @param field
 * number of fields.
 * @param file
 * file name.
 */
	void set_masked(unsigned long field, FileInfo const &file);

	// Data retrieval routines
/**
 * Returns the <tt>ID</tt> of the product.
 */
	const char *product_id() const { return Prod; }
/**
 * Returns the <tt>ACIS</tt> version number used to save the model.
 */
	const char *acis_version() const { return AVers; }
/**
 * Returns the value of the millimeters per model unit.
 */
	double units() const { return Units; }
/**
 * Returns the date on the save file.
 */
	const char *date() const { return Date; }
/**
 * Returns the save file version used in storing the file.
 */
	int file_version() const { return FVers; }
/**
 * Returns the value of the <tt>SPAresabs</tt> when the model was saved.
 */
	double tol_abs() const { return Tol_abs; }
/**
 * Returns the value of the <tt>SPAresnor</tt> when the model was saved.
 */
	double tol_nor() const { return Tol_nor; }
};

/** @} */
#endif
