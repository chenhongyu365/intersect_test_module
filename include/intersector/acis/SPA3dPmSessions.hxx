/*******************************************************************/
/*    Copyright (c) 1989-2020 by Spatial Corp.                     */
/*    All rights reserved.                                         */
/*    Protected by U.S. Patents 5,257,205; 5,351,196; 6,369,815;   */
/*                              5,982,378; 6,462,738; 6,941,251    */
/*    Protected by European Patents 0503642; 69220263.3            */
/*    Protected by Hong Kong Patent 1008101A                       */
/*******************************************************************/
#ifndef SPA3dPmSessions_hxx
#define SPA3dPmSessions_hxx

extern "C"
{
	#include "meshgems/meshgems.h"
	#include "meshgems/cadsurf.h"
	#include "meshgems/cleaner.h"
	#include "meshgems/hexa.h"
	#include "meshgems/hybrid.h"
	#include "meshgems/hybrid_cfd.h"
	#include "meshgems/tetra.h"
	#include "meshgems/tetra_hpc.h"
	#include "meshgems/cvm.h"
}

#include "face.hxx"
#include "edge.hxx"
#include "vertex.hxx"

#include "SPA3dPmMesh.hxx"

/**
* @file SPA3dPmSessions.hxx
* @CAA2Level L1
* @CAA2Usage U1
* \addtogroup ACIS3DPM
*
* @{
*/

namespace Spa3dpm
{

struct MgSession_Impl;
struct Parameters_Impl;

/**
* An object of the <tt>Parameters</tt> class holds a set of parameters for a MeshGems session.
* This is a light object containig a pointer to the actual set of parameters. Copying the object
* does not duplicate the set of parameters but only adds an additional reference to it.
*/
struct DECL_SPA3dpm Parameters
{
	/**
	* Adds a parameter name--value pair to the sets of parameters.
	* @param[in] name : parameter name
	* @param[in] value : parameter value
	*/
	void SetParam(const char *name, const char *value);

	/**
	* Default constructor
	*/
	Parameters();

	/**
	* Copy constructor. New object will reference the same set of parameters as the old one.
	*/
	Parameters(const Parameters &other);

	/**
	* Assignment operator
	*/
	const Parameters &operator=(const Parameters &other);

	/**
	* Destructor
	*/
	~Parameters();

private:
	Parameters_Impl *impl;
	friend struct II;
};

/**
* The <tt>SessionMessages</tt> class gives access to the messages generated by MeshGems during a MeshGems session.
* The base class of all session classes, <tt>MgSession</tt>, can be used to initialize an instance of <tt>SessionMessages</tt>.
* This is a light object containig only a pointer to the session implementation. Copying the object
* does not duplicate the session or the messages but only adds an additional reference to them.
* All indexes are based at 0. The functions throw exceptions in case of error.
*/
struct DECL_SPA3dpm SessionMessages
{
	/**
	 * Returns the number of messages for the session.
	 */
	size_t GetMessageCount() const;

	/**
	* Returns the message code for the indicated message.
	* @param iMessage should be >= 0 and < GetMessageCount(). 
	* See message.h (Distene header file) for description of message codes.
	*/
	int GetMessageCode(size_t iMessage) const;

	/**
	* Returns the message description for the indicated message.
	* @param iMessage should be >= 0 and < GetMessageCount().
	* The returned string should not be modified, and is not permanent.
	*/
	const char *GetMessageDescription(size_t iMessage) const;

	/**
	* Returns the message sender for the indicated message.
	* @param iMessage should be >= 0 and < GetMessageCount().
	* The returned string should not be modified, and is not permanent.
	*/
	const char *GetMessageSender(size_t iMessage) const;

	/**
	* Returns the count for the integer data for this message.
	* @param iMessage should be >= 0 and < GetMessageCount().
	*/
	size_t GetIntDataCount(size_t iMessage) const;

	/**
	* Returns the indicated integer data for the indicated message.
	* @param iMessage should be >= 0 and < GetMessageCount().
	* @param iDatum should be >= 0 and < GetIntDataCount(iMessage).
	*/
	int GetIntData(size_t iMessage, size_t iDatum) const;

	/**
	* Returns the count for the double data for this message.
	* @param iMessage should be >= 0 and < GetMessageCount();
	*/
	size_t GetDoubleDataCount(size_t iMessage) const;

	/**
	* Returns the indicated double data for the indicated message.
	* @param iMessage should be >= 0 and < GetMessageCount();
	* @param iDatum should be >= 0 and < GetDoubleDataCount(iMessage).
	*/
	double GetDoubleData(size_t iMessage, size_t iDatum) const;

	/**
	* Default constructor. Creates an object that belongs to no session.
	* Call <tt>MgSession::GetMessages</tt> to initialize the object.
	*/
	SessionMessages();

	/**
	* Copy constructor. New object will reference the same messages as the old one.
	*/
	SessionMessages(const SessionMessages &other);

	/**
	* Assignment operator
	*/
	const SessionMessages &operator=(const SessionMessages &other);

	/**
	* Destructor
	*/
	~SessionMessages();

private:
	MgSession_Impl *impl;
	friend struct II;
};

/**
* <tt>MgSession</tt> is the base class for the meshgems session classes. The default constructor, copy constructor, assignment operator and the
* destructor are implemented in <tt>MgSession</tt> for all the session classes. These functions are not declared in the session classes, but
* the compiler must generate default implementations of these functions in the session classes. These default implementations will call
* the respective functions in <tt>MgSession</tt>.
*/
class DECL_SPA3dpm MgSession
{
protected:

	/**
	* Creates an uninitialized object. It refers to no actual session. Use the assignment operator or one of
	* @href <tt>api_3dpm_create_cadsurf_session</tt>, @href <tt>api_3dpm_create_cleaner_session</tt>, @href <tt>api_3dpm_create_hexa_session</tt>, @href <tt>api_3dpm_create_hybrid_session</tt>,
	* @href <tt>api_3dpm_create_hybrid_cfd_session</tt>, @href <tt>api_3dpm_create_tetra_session</tt>, @href <tt>api_3dpm_create_tetra_hpc_session</tt> to make the object refer to an actual session.
	*/
	MgSession();

	/**
	* Copy constructor. The new object will refer to the same underlying session as the "other" object.
	*/
	MgSession(const MgSession &other);

	/**
	* Assignment operator. The "this" object will refer to the same underlying session as the "other" object.
	*/
	const MgSession &operator=(const MgSession &other);

	/**
	* Destructor. It only deletes the underlying session if this object was the last reference to it.
	*/
	~MgSession();

public:

	/**
	* Returns true if the object refers to an actual session.
	*/
	bool Initialized() const;

	/**
	* Returns the native Distene context pointer belonging to the session referred to by this object.
	*/
	meshgems_context_t *GetMeshgemsContextPtr();

	/**
	* Sets a list of parameters to the session.
	*/
	void SetParams(const Parameters &params);

	/**
	* Get the messages generated by MeshGems during the operations of the session.
	*/
	void GetMessages(SessionMessages &msg);

private:
	MgSession_Impl *impl;
	friend struct II;
};

}

/** @} */
#endif
