/*******************************************************************/
/*    Copyright (c) 1989-2020 by Spatial Corp.                     */
/*    All rights reserved.                                         */
/*    Protected by U.S. Patents 5,257,205; 5,351,196; 6,369,815;   */
/*                              5,982,378; 6,462,738; 6,941,251    */
/*    Protected by European Patents 0503642; 69220263.3            */
/*    Protected by Hong Kong Patent 1008101A                       */
/*******************************************************************/
/**
* @file pattern_anno.hxx
 * @CAA2Level L1
 * @CAA2Usage U1
 * \addtogroup ACISANNOTATIONS
 *
 * @{
 */

#ifndef __PATTERN_ANNO_HXX__
#define __PATTERN_ANNO_HXX__

#include "dcl_kern.h"
#include "annotation.hxx"

/**
 * @nodoc
 */
#define PATTERN_ANNOTATION_LEVEL ( ANNOTATION_LEVEL + 1)

/**
 * @nodoc
 */
extern DECL_KERN int PATTERN_ANNOTATION_TYPE;

/**
 * @nodoc
 */
ENTITY_IS_PROTOTYPE( PATTERN_ANNOTATION, KERN )
#if 0
; // semicolon needed for mkman (doc tool) parsing
#endif

/**
 * Implements the annotations for patterned entities.
 * <br>
 * <b>Role:</b> This annotation class is used to associate entities generated
 * by a pattern operation with the original (seed) entities.  Only entities
 * having geometry (i.e., <tt>FACE</tt>s, <tt>COEDGE</tt>s, <tt>EDGE</tt>s,
 * and <tt>VERTEX</tt>s) are so annotated.
 * <br><br>
 * Objects of the annotation class have a single input (seed) entity  and one
 * or more output (generated) entities.  As with all annotation inputs, the 
 * values of the former are actually stored within <tt>ATTRIB_TAG</tt>s.
 * <br><br>
 * Retrieval of patterned entities is made by means of the <tt>seed</tt> and
 * <tt>generated</tt> methods.  As multiple entities may be generated from a
 * single seed, the <tt>ENTITY</tt> returned by the latter may be an 
 * <tt>EE_LIST</tt>.  The <tt>element</tt> method can be used to return an
 * specific, indexed entity.
 * @see ANNOTATION, ENTITY, pattern, EE_LIST, ATTRIB_TAG
 */
class DECL_KERN PATTERN_ANNOTATION: public ANNOTATION {
protected:
	enum {
		e_seed,
		e_generated,
		e_num_datums
	};
public:
	/**
	 * @nodoc
	 */
	ANNOTATION_MAP_DECL(e_num_datums)
#if 0
; // semicolon needed for mkman (doc tool) parsing)
#endif
	/**
	 * @nodoc
	 */
	ENTITY_FUNCTIONS( PATTERN_ANNOTATION, KERN )
#if 0
; // semicolon needed for mkman (doc tool) parsing)
#endif
// Because mkman isn't aware that ENTITY_FUNCTIONS changes access to "public", do so
// explicitly here:
public:

/**
 * Constructs a <tt>PATTERN_ANNOTATION</tt> referring to an optional seed entity.
 * <br><br>
 * @param seed
 * the seed entity to which <tt>this</tt> pattern annotation refers.
 */
	PATTERN_ANNOTATION(ENTITY* seed = NULL);

/**
 * Returns a pointer to the original entity that was patterned.
 * <br><br>
 * <b>Role:</b> The returned entity pointer will be an <tt>ATTRIB_TAG</tt>
 * identifying the original entity which has been patterned.
 */
	ENTITY* seed() const { return ents[e_seed]; }
/**
 * Returns a pointer to entities generated as a result of the pattern operation.
 * <br><br>
 * <b>Role:</b> The returned entity pointer will be an <tt>EE_LIST</tt>
 * if more than one entity was generated by the operation.
 */
	ENTITY* generated() const { return ents[e_generated]; }

/**
 * Returns a pointer to the <i>n</i>th entity generated from the seed, or <tt>NULL</tt>
 * if the supplied index is invalid.
 * <br><br>
 * <b>Role:</b> The seed entity is considered to be the <i>0</i>th entity.  Entities
 * generated from the seed are indexed by 1 and higher.
 * <br><br>
 * @param n
 * index of the entity requested.
 */
	ENTITY* element(int n) const;

/**
 * @nodoc
 */
    void add_seed(ENTITY* s) { add_input_entity(ents[e_seed], s); }// internal use only
/**
 * @nodoc
 */
    void add_generated(ENTITY* g) { add_output_entity(ents[e_generated], g); }// internal use only
/**
 * @nodoc
 */
    void remove_seed(ENTITY* s) { remove_input_entity(ents[e_seed], s); }// internal use only
/**
 * @nodoc
 */
	void remove_generated(ENTITY* g) { remove_output_entity(ents[e_generated], g); }// internal use only
};

/** @} */
#endif //__PATTERN_ANNO_HXX__
