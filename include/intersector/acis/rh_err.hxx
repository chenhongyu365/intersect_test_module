/* ORIGINAL: rbase2.1/rnd_husk/intrface/rh_err.hxx */
// "@(#)$Id: rh_err.hxx,v 1.6 2002/07/01 15:50:03 ktatters Exp $
/*******************************************************************/
/*    Copyright (c) 1989-2020 by Spatial Corp.                     */
/*    All rights reserved.                                         */
/*    Protected by U.S. Patents 5,257,205; 5,351,196; 6,369,815;   */
/*                              5,982,378; 6,462,738; 6,941,251    */
/*    Protected by European Patents 0503642; 69220263.3            */
/*    Protected by Hong Kong Patent 1008101A                       */
/*******************************************************************/
#if !defined( RENDERER_ERR_HEADER )
#define RENDERER_ERR_HEADER

// ***********************************************************
//
//  File name : $RCSfile: rh_err.hxx,v $
//
//  Description :
//
//       Render Husk Internal Error Support
//
//
//  ************************************************************
//
//  History:
//     11-Dec-92   PMK created
//


//
//-----------------------------------------------------------------------------
//
// INTERNAL ERROR SUPPORT
//
//   Note, most core LightWorks library functions do not return an
//   error status, but instead call a diagnostics function, which
//   the render husk uses to set an error status
//-----------------------------------------------------------------------------
//
//
// Internal Error variables
//
#include "err_info.hxx"
#include "dcl_rb.h"

#ifdef THREAD_SAFE_ACIS
extern  DECL_RB safe_integral_type<int> rh_errsev;
extern  DECL_RB safe_integral_type<int> rh_errno;
extern  DECL_RB safe_pointer_type<char> rh_errstr;
#else
extern  DECL_RB int   rh_errsev;
extern  DECL_RB int   rh_errno;
extern  DECL_RB char* rh_errstr;
#endif

//
// Severity Levels for error messages
//
#define RH_SEVERITY_NONE     0
#define RH_SEVERITY_INFORM   1
#define RH_SEVERITY_WARNING  2
#define RH_SEVERITY_FATAL    3

//
//  Function: rh_error_notify
//
//  Description:
//     Sets internal Render Husk error  status and calls
//     ACIS error reporting mechanism
//
DECL_RB void rh_error_notify
   (
      int id,
      int severity = RH_SEVERITY_FATAL,
      char * msg = NULL
   );

// -----------------------------------------------------------------------------
//
// Macros to check if a render entity handle is null or the
// entity handle is null or the entity handle points to a
// null object. The latter condition guards against
// a condition  LightWorks functions do not handle
//
// -----------------------------------------------------------------------------

#define check_render_entity( ENT ) \
	{ \
	   if ( !ENT || ( ENT->handle() == NULL ) ) \
	   {\
	      rh_error_notify( RH_IE_BAD_HANDLE , RH_SEVERITY_FATAL ); \
	      return ( FALSE ) ; \
	   }\
	}

#define check_new_render_entity( ENT )\
	{ \
	   if ( !ENT ) \
	   {\
	      rh_error_notify( RH_IE_CRT_FAIL , RH_SEVERITY_FATAL ); \
	      return ( FALSE ) ; \
	   }\
	   else if ( ENT->handle() == NULL ) \
	   { \
	      ENT->lose() ; \
	      rh_error_notify( RH_IE_CRT_FAIL , RH_SEVERITY_FATAL ); \
	      return ( FALSE ) ; \
	   } \
	}

// -----------------------------------------------------------------------------
//
// Internal Error Handling
//
//    Macros to manage error codes that might be generated by
//    internal errors in the render husk code
//
// -----------------------------------------------------------------------------


#define RH_ERROR_PENDING()   ( rh_errsev == RH_SEVERITY_FATAL  )

#define INIT_FUNC \
   { rh_errno = RH_CE_NONE; rh_errsev = RH_SEVERITY_NONE; rh_errstr = NULL; }

#define CHECK_ERROR \
   { if ( RH_ERROR_PENDING() )  return ( FALSE ); }

#define CHECK_RETURN \
   { if ( RH_ERROR_PENDING() )  return ( FALSE ); \
     else return( TRUE ); }
#endif
