/*******************************************************************/
/*    Copyright (c) 1989-2020 by Spatial Corp.                     */
/*    All rights reserved.                                         */
/*    Protected by U.S. Patents 5,257,205; 5,351,196; 6,369,815;   */
/*                              5,982,378; 6,462,738; 6,941,251    */
/*    Protected by European Patents 0503642; 69220263.3            */
/*    Protected by Hong Kong Patent 1008101A                       */
/*******************************************************************/
#ifndef __VABRIDGE_H_
#define __VABRIDGE_H_

// ACIS includes-
#include "acistype.hxx"
#include "api.hxx"
#include "base.hxx"
#include "dcl_vabridge.h"
#include "va_mesh.hxx"

/**
 *  @defgroup MeshTop Mesh Functionality
 *  @defgroup Mesh Basic Operations
 *  @ingroup MeshTop
 */

/**
 * @file vabridge.h
 *
 * @addtogroup Mesh
 * @brief Declared at <vabridge.h>
 * @{
 */
class VA_MESH;
class VA_SURFMESH;
class VA_TETMESH;
class VA_VOLMESH;

class va_base_mesh_options;
class va_surface_mesh_options;
class va_tet_mesh_options;
class REFINEMENT;
class facet_options;
class BODY;
class FACE;
class EDGE;
class VERTEX;
class CELL;

class va_surfmesh;
struct vis_SurfMesh;
struct vis_TetMesh;
struct vis_VolMesh;
struct vis_Connect;

/**
 * ACIS style initialization.
 *
 * @role Initializes the VKI ACIS bridge.
 * This should be called once during run-time.
 *
 * @return Indicates success or failure.
 **/
DECL_VABRIDGE
outcome api_va_initialize();

/**
 * ACIS style termination.
 *
 * @role Terminates the VKI ACIS bridge.
 * This should be called once during run-time.
 *
 * @return
 * Indicates success or failure.
 **/
DECL_VABRIDGE
outcome api_va_terminate();

////////////////////////////////////////////////////////////////////////////
// APIs
/**
 * @brief Creates a %surface mesh object.
 *
 * @role Creates a mesh object and the corresponding
 *       Mesher objects, but does not generate a mesh. This gives
 *       applications an opportunity to set refinement options in the Faceter before
 *       any ENTITYs are meshed.
 *
 * @journal Available
 *
 * @param mesh		(output) New %surface mesh object
 * @param mesh_opts	(input) Mesh options object that set several parameters on the mesh
 * @param ao		(input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_create_surface_mesh(va_surfmesh*& surface_mesh, const va_surface_mesh_options* mesh_opts = NULL, AcisOptions* ao = NULL);

/**
 * @brief Generates input geometry for the mesher, without generating a mesh.
 *
 * @role This API serves as an intermediate step that generates the "input geometry"
 *       for the mesher. That is, the Surface Mesh object is populated with ACIS
 *       facet data, but no mesh is generated. This "tessellation mesh" can be used for
 *       debugging or as an input to a %surface or volumetric meshing operation.
 *       The tessellation mesh generated by this signature always uses <TT>REFINEMENT</tt>
 *       objects to control the facetting of the body.
 *
 * @journal Not Available
 *
 * @param body		   (input) Body to be meshed
 * @param surface_mesh (input/output) Surface Mesh object, if this is <tt>NULL</tt> then a new one is created
 * @param mesh_opts    (input) Mesh options object that sets several parameters on the mesh
 * @param ao		   (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_generate_tessellation_mesh(ENTITY* body, va_surfmesh*& surface_mesh, const va_surface_mesh_options* mesh_opts = NULL, AcisOptions* ao = NULL);

/**
 * @brief Generates input geometry for the mesher, without generating a mesh.
 *
 * @role This API serves as an intermediate step that generates the "input geometry"
 *       for the mesher. That is, the Surface Mesh object is populated with ACIS
 *       facet data, but no mesh is generated. This "tessellation mesh" can be used for
 *       debugging or as an input to a %surface or volumetric meshing operation.
 *
 *       This signature of this API function allows one to generate the tessellation
 *       mesh using either a facet_options object or a refinement object.
 *
 * @journal Not Available
 *
 * @param body	       (input) Body to be meshed
 * @param surface_mesh (input/output) Surface Mesh object, if this is <tt>NULL</tt> then a new one is created
 * @param use_facet_options (input) Specifies whether to facet using a facet_options or refinement object
 * @param fo		   (input) Facet options object that sets several parameters for faceting
 * @param mesh_opts    (input) Mesh options object that sets several parameters on the mesh
 * @param ao		   (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_generate_tessellation_mesh(ENTITY* body, va_surfmesh*& surface_mesh, logical use_facet_options, facet_options* fo = NULL, const va_surface_mesh_options* mesh_options = NULL, AcisOptions* ao = NULL);

/**
 * @brief Generates a Surface Mesh for a list of bodies.
 *
 * @role This API generates a Surface Mesh for the given list of ACIS bodies.
 *
 * @journal Available
 *
 * @param body_list	   (input) List of bodies to be meshed
 * @param surface_mesh (input/output) Surface Mesh object; if this is <tt>NULL</tt> then a new one is created
 * @param mesh_opts    (input) Mesh options object that sets several parameters on the mesh
 * @param ao		   (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_generate_surface_mesh(const ENTITY_LIST& body_list, va_surfmesh*& surface_mesh, const va_surface_mesh_options* mesh_opts = NULL, AcisOptions* ao = NULL);

// Jeff - New Surface Mesh API MESH_WITH_FACET_OPTIONS
/**
 * @brief Generates a Surface Mesh for the given body.
 *
 * @role This API generates a Surface Mesh for the given ACIS body. The generation of ACIS
 *       facets by the ACIS Faceter (which serve as the "input geometry" to the Mesher)
 *       is controlled by a <tt>facet_options</tt> object. If the caller does not specify a
 *       <tt>facet_options</tt> object, one will be constructed based upon the given mesh options
 *       and the size of the given body. It is recommended that the caller specify
 *       both the facet options and mesh options for best results.
 *
 *       The generation of %surface elements is controlled by the
 *       <tt>va_surface_mesh_options</tt> object.
 *       It is recommended that the caller specify the %surface mesh options for
 *       best results. If the caller does not specify mesh options, mesh options
 *       parameters will be set based upon the size of the given body.
 *
 * @journal Available
 *
 * @param body		   (input) Body to be meshed
 * @param surface_mesh (output) Surface Mesh object
 * @param mesh_opts    (input) Mesh options object that sets several parameters for meshing
 * @param facet_opts   (input) Facet options object that sets several parameters for faceting
 * @param ao		   (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_generate_surface_mesh(ENTITY* body, va_surfmesh*& surface_mesh, const va_surface_mesh_options* mesh_opts = NULL, facet_options* facet_opts = NULL, AcisOptions* ao = NULL);

// Jeff - New Tet Mesh API MESH_WITH_FACET_OPTIONS
/**
 * @brief Generates a Tetrahedral Mesh for the given body.
 *
 * @role This API generates a Tetrahedral Mesh for the given ACIS body. The generation of ACIS
 *       facets by the ACIS Faceter (which serve as the "input geometry" to the Mesher)
 *       is controlled by a <tt>facet_options</tt> object. If the caller does not specify a
 *       <tt>facet_options</tt> object, one will be constructed based upon the given mesh options
 *       and the size of the given body. It is recommended that the caller specify
 *       both the facet options and mesh options for best results.
 *
 *       The generation of %surface and tetrahedral elements is controlled by
 *       <tt>va_surface_mesh_options</tt> and <tt>va_tet_mesh_options</tt> objects.
 *       It is recommended that the caller specify both %surface and tet mesh options for
 *       best results. If the caller does not specify mesh options, options objects
 *       parameters will be set based upon the size of the given body.
 *
 * @journal Available
 *
 * @param body
 * (input) Body to be meshed
 * @param output_tetmesh
 * (output) New tetrahedral mesh object
 * @param surf_mesh_opts
 * (input) Surface mesh options object that sets several parameters for %surface meshing
 * @param tet_mesh_opts
 * (input) Volumetric mesh options object that sets several parameters for volumetric meshing
 * @param facet_opts
 * (input) Facet options object that sets several parameters for faceting
 * @param ao
 * (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_generate_tet_mesh(ENTITY* body, va_tetmesh*& output_tetmesh, const va_surface_mesh_options* surf_mesh_opts = NULL, const va_tet_mesh_options* tet_mesh_opts = NULL, facet_options* facet_opts = NULL, AcisOptions* ao = NULL);

// Jeff - New Mesh API SUBSET_MESH
/**
 * @brief Generates a Subset Surface Mesh.
 *
 * @role This API generates a Surface Mesh that is a subset of the given Surface Mesh.
 *       The subset is defined by the elements on the faces of the cells
 *       in the input ENTITY_LIST.
 *
 *       For additional information on cells, see the Technical Articles on Cellular Topology.
 *
 * @journal Not Available
 *
 * @param surface_mesh
 * (input) Surface Mesh object
 * @param cell_list
 * (input) List of cells that specify the subset
 * @param subset_mesh
 * (output) Surface Mesh object that is a subset of the input Surface Mesh object
 * @param ao
 * (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_generate_subset_surface_mesh(va_surfmesh* surface_mesh, const ENTITY_LIST& cell_list, va_surfmesh*& subset_mesh, AcisOptions* ao = NULL);

// LET - New Hybrid Mesh API - MESH_WITH_FACET_OPTIONS
/**
 * @brief Generates a Hybrid Mesh for the given body.
 *
 * @role This API function generates a mesh containing both %surface and volumetric
 *       elements for the given ACIS body. More specifically, it generates triangular
 *       and tetrahedral elements. This API function works in conjunction with
 *       Cellular Topology. The input body should have multiple 3D cells. The
 *       cells contained in the <tt>cell_list</tt> will be meshed with tet elements.
 *       The boundary of the remaining cells will be meshed with triangular elements.
 *
 *       The generation of ACIS facets by the ACIS Faceter (which serve as the "input
 *       geometry" to the Mesher) is controlled by a <tt>facet_options</tt> object. If the
 *       caller does not specify a <tt>facet_options</tt> object, one will be constructed
 *       based upon the given mesh options and the size of the given body. It is recommended
 *       that the caller specify both the facet options and mesh options for best results.
 *
 *       The generation of %surface and volumentric elements is controlled by
 *       <tt>va_surface_mesh_options</tt> and <tt>va_tet_mesh_options</tt> objects.
 *       It is recommended that the caller specify both %surface and tet mesh options for
 *       best results. If the caller does not specify mesh options, options objects
 *       parameters will be set based upon the size of the given body.
 *
 * @journal Available
 *
 * @param body
 * (input) Body to be meshed
 * @param cell_list
 * (input) List of cells that specify the regions to be filled with tet elements
 * @param output_volmesh
 * (output) Hybrid Mesh object
 * @param surf_mesh_opts
 * (input) Surface mesh options object that sets several parameters for %surface meshing
 * @param tet_mesh_opts
 * (input) Volumetric mesh options object that sets several parameters for volumetric meshing
 * @param facet_opts
 * (input) Facet options object that sets several parameters for faceting
 * @param ao
 * (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_generate_hybrid_mesh(BODY* body, const ENTITY_LIST& cell_list, va_volmesh*& output_volmesh, const va_surface_mesh_options* surf_mesh_opts = NULL, const va_tet_mesh_options* tet_mesh_opts = NULL, facet_options* facet_opts = NULL,
                                    AcisOptions* ao = NULL);

// LET - New Hybrid Mesh API
/**
 * @brief Generates a Hybrid Mesh for the given %surface mesh.
 *
 * @role This API function generates a Mesh containing both %surface and volumetric
 *       elements for the given %surface mesh. More specifically, it generates a mesh
 *       containing both triangular and tetrahedral elements. This API function works
 *       in conjunction with Cellular Topology. The input body should have multiple
 *       3D cells. The cells contained in the <tt>cell_list</tt> will be meshed with
 *       tet elements. The boundary of the remaining cells will continue to be meshed
 *       with the input triangular elements. The behavior of this signature of this
 *       API function is similar to the signature that takes a body an an input argument;
 *       however, this signature allows the caller to refine the %surface mesh before
 *       generating the volumetric elements.
 *
 *       The generation of volumetric elements is controlled by a
 *       <tt>va_tet_mesh_options</tt> object. It is recommended that the caller specify
 *       a tet mesh options object for best results.
 *
 * @journal Not Available
 *
 * @param input_surfmesh
 * (input) Surface Mesh object
 * @param cell_list
 * (input) List of 3D cells that specify the regions to be filled with tet elements
 * @param output_volmesh
 * (output) Hybrid Mesh object
 * @param tet_mesh_opts
 * (input) Volumetric mesh options object that sets several parameters for volumetric meshing
 * @param ao
 * (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_generate_hybrid_mesh(va_surfmesh* input_surfmesh, const ENTITY_LIST& cell_list, va_volmesh*& output_volmesh, const va_tet_mesh_options* tet_mesh_opts = NULL, AcisOptions* ao = NULL);

// LET - Three new mesh API functions to generate a mesh from a debug file.

/**
 * @brief Generates a %surface mesh from a mesh debug file.
 *
 * @role This API function generates a %surface mesh from the specified mesh debug file.
 *       The input file specifies the input geometry and all the meshing controls.
 *       Mesh debug files are used by the journalling mechanism and to report meshing
 *       issues to Spatial or VKI.
 *
 * @journal Not Available
 *
 * @param file_name
 * (input) Debug file name
 * @param text_mode
 * (input) <tt>TRUE</tt> if the input file is ASCII, <tt>FALSE</tt> if binary.
 * @param output_surfmesh
 * (output) Generated Surface Mesh object
 * @param ao
 * (input) ACIS options object
 *
 * @return
 * Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_generate_surface_mesh(const char* file_name, logical text_mode, va_surfmesh*& output_surfmesh, AcisOptions* ao = NULL);

/**
 * @brief Generates a tet mesh from a mesh debug file.
 *
 * @role This API function generates a tet mesh from the specified mesh debug file.
 *       The input file specifies the input geometry and all the meshing controls.
 *       Mesh debug files are used by the journalling mechanism and to report meshing
 *       issues to Spatial or VKI.
 *
 * @journal Not Available
 *
 * @param file_name
 * (input) Debug file name
 * @param text_mode
 * (input) <tt>TRUE</tt> if the input file is ASCII, <tt>FALSE</tt> if binary.
 * @param output_tetmesh
 * (output) New tetrahedral mesh object
 * @param ao
 * (input) ACIS options object
 *
 * @return
 * Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_generate_tet_mesh(const char* file_name, logical text_mode, va_tetmesh*& output_tetmesh, AcisOptions* ao = NULL);

/**
 * @brief Generates a hybrid mesh from a mesh debug file.
 *
 * @role This API function generates a hybrid mesh from the specified mesh debug file.
 *       The input file specifies the input geometry and all the meshing controls.
 *       Mesh debug files are used by the journalling mechanism and to report meshing
 *       issues to Spatial or VKI.
 *
 * @journal Not Available
 *
 * @param file_name
 * (input) Debug file name
 * @param text_mode
 * (input) <tt>TRUE</tt> if the input file is ASCII, <tt>FALSE</tt> if binary.
 * @param output_volmesh
 * (output) Generated Hybrid Mesh object
 * @param ao
 * (input) ACIS options object
 *
 * @return
 * Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_generate_hybrid_mesh(const char* file_name, logical text_mode, va_volmesh*& output_volmesh, AcisOptions* ao = NULL);

/**
 * @brief Generates a tetrahedral mesh, given a %surface mesh object.
 *
 * @role This API generates a tetrahedral mesh for the given %surface mesh.
 * This allows the caller to generate and refine a %surface mesh before
 * generating the tetrahedral mesh.
 *
 * @journal Available
 *
 * @param in_mesh
 * (input) Surface mesh object
 * @param out_mesh
 * (output) New tetrahedral mesh object
 * @param tet_mesh_opts
 * (input) Volumetric mesh options object that sets several parameters for volumetric meshing
 * @param ao
 * (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_generate_tet_mesh(va_surfmesh* in_mesh, va_tetmesh*& out_mesh, const va_tet_mesh_options* tet_mesh_opts = NULL, AcisOptions* ao = NULL);

/**
 * @brief Generates a tet mesh directly from ACIS bodies.
 *
 * @role Generates a tetrahedral mesh, given a list of ACIS bodies.
 *
 * @journal Available
 *
 * @param body_list
 * (input) List of bodies to be meshed
 * @param out_mesh
 * (output) New tetrahedral mesh object
 * @param surf_mesh_opts
 * (input) Surface mesh options object that sets several parameters for %surface meshing
 * @param tet_mesh_opts
 * (input) Volumetric mesh options object that sets several parameters for volumetric meshing
 * @param ao
 * (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_generate_tet_mesh(const ENTITY_LIST& body_list, va_tetmesh*& out_mesh, const va_surface_mesh_options* surf_mesh_opts = NULL, const va_tet_mesh_options* tet_mesh_opts = NULL, AcisOptions* ao = NULL);

/**
 * @brief Creates a tet mesh object.
 *
 * @role Creates a tet mesh object and the corresponding
 *       Mesher objects, but does not generate a mesh. This gives
 *       applications an opportunity to set options on the Mesher
 *       objects.
 *
 * @journal Available
 *
 * @param mesh
 * (input) New tet Mesh object
 * @param mesh_opts
 * (input) Mesh options object that set several parameters on the mesh
 * @param ao
 * (input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_create_tet_mesh(va_tetmesh*& tet_mesh, const va_tet_mesh_options* mesh_opts = NULL, AcisOptions* ao = NULL);

/**
 * Deletes a Mesh object.
 *
 * @param mesh	Mesh to delete
 *
 * @return Indicates success or failure.
 **/
DECL_VABRIDGE outcome api_va_delete_mesh(va_mesh* mesh);

/**
 * @brief Sets the refinement for a specific element in a Mesh.
 *
 * @journal Not Available
 *
 * @param in_mesh	(input) Mesh to be refined
 * @param elem_idx	(input) Element index (Mesh element index starts with 1)
 * @param size		(input) New target edge length
 * @param ao		(input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_set_refinement(va_mesh* in_mesh, int elem_idx, double size, AcisOptions* ao = NULL);

/**
 * @brief Refines a Mesh.
 *
 * @role At least one of its elements must have been specified
 * for refinement using @href api_va_set_refinement.
 *
 * @journal Not Available
 *
 * @param in_mesh	(input) Mesh to be refined
 * @param ao		(input) ACIS options object
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_refine(va_mesh* in_mesh, AcisOptions* ao = NULL);

/**
 * @brief Adds a mesh element size control to a given ACIS entity.
 *
 * @role Mesh element size controls can be added to specific
 * ACIS faces, edges, vertices, 3D cells. Currently you can specify a
 * size for the target surface element size on a face, along an edge,
 * or around a vertex, or the target tet element size within a 3D cell.
 *
 * @journal Not Available
 *
 * @param ent
 * (input) ACIS face, edge, vertex, or cell in the body to be meshed.
 * @param size
 * (input) Target element size for the specified entity.
 * @param mesh_opts
 * (input) Mesh options object that sets several parameters for mesh generation.
 * @param ao
 * (input) ACIS options object.
 */
DECL_VABRIDGE outcome api_va_set_entity_size_control(ENTITY* ent, double size, va_base_mesh_options* mesh_opts, AcisOptions* ao = NULL);

/**
 * @brief Marks a list of ACIS edges and vertices as being non-persistent.
 *
 * @role By default each element edge associated with an ACIS edge, and each element
 * node associated with an ACIS vertex, is persistent.
 * In other words, by default all ACIS edges are hard edges and all ACIS vertices are hard points.
 * Specifying an edge (or vertex) as being non-persistent implies an element edge (or node)
 * will not be associated with the ACIS edge (or vertex).
 *
 * @journal Not Available
 *
 * @param e_list
 * (input) List of non-persistent edges and vertices in the body to be meshed.
 * @param surf_mesh_opts
 * (input) Surface mesh options object that sets several parameters for %surface meshing.
 * @param ao
 * (input) ACIS options object.
 */

DECL_VABRIDGE outcome api_va_set_non_persistent_entities(ENTITY_LIST& e_list, va_surface_mesh_options* surf_mesh_opts, AcisOptions* ao = NULL);

/**
 * @brief Marks a list of ACIS edges as being non-subdividable.
 *
 * @role By default each element edge associated with an ACIS edge is persistent.
 * In other words, by default all ACIS edges are hard edges and all ACIS vertices are hard points.
 * Specifying an edge as being non-subdividable implies the element edge associated
 * with the ACIS edge is persistent and moreover it cannot be subdivided.
 *
 * @journal Not Available
 *
 * @param e_list
 * (input) List of non-subdividable edges in the body to be meshed.
 * @param surf_mesh_opts
 * (input) Surface mesh options object that sets several parameters for %surface meshing.
 * @param ao
 * (input) ACIS options object.
 */

DECL_VABRIDGE outcome api_va_set_non_subdividable_entities(ENTITY_LIST& e_list, va_surface_mesh_options* surf_mesh_opts, AcisOptions* ao = NULL);

/**
 * @brief Marks a list of ACIS edges as being non-defeaturable.
 *
 * @role By default each element edge associated with an ACIS edge is persistent.
 * In other words, by default all ACIS edges are hard edges and all ACIS vertices are hard points.
 * Specifying an edge as being non-defeaturable implies the element edge associated
 * with the ACIS edge is persistent and moreover it cannot be removed by defeaturing.
 *
 * @journal Not Available
 *
 * @param e_list
 * (input) List of non-defeaturable edges in the body to be meshed.
 * @param surf_mesh_opts
 * (input) Surface mesh options object that sets several parameters for %surface meshing.
 * @param ao
 * (input) ACIS options object.
 */

DECL_VABRIDGE outcome api_va_set_non_defeaturable_entities(ENTITY_LIST& e_list, va_surface_mesh_options* surf_mesh_opts, AcisOptions* ao = NULL);

/**
 * Gets the number of nodes in a mesh.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Available.
 *
 * @param in_mesh 		Mesh created by Mesher
 * @param node_count 	Number of nodes in the mesh
 * @param msopts        (Optional) Mesh options
 * @param ao 			(Optional) ACIS options
 *
 * @return Indicates success or failure.
 **/
DECL_VABRIDGE
outcome api_va_get_node_count(const va_mesh* in_mesh, int& node_count, va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);

/**
 * Gets the position of nodes in a mesh.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Available.
 *
 * @param in_mesh 		Mesh created by Mesher
 * @param node_count    Number of nodes to get the positions of
 * @param node_indices  Indices of the nodes to get positions for
 * @param node_position Positions
 * @param msopts        (Optional) Mesh options
 * @param ao 			ACIS options
 *
 * @return 				Indicates success or failure.
 **/
DECL_VABRIDGE
outcome api_va_get_node_positions(const va_mesh* in_mesh, const int node_count, const int* node_indices, SPAposition* node_position, va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);

/**
 * Gets the number of elements in a mesh.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Available.
 *
 * @param in_mesh		Mesh created by Mesher
 * @param element_count	Number of elements in the mesh
 * @param msopts        (Optional) Mesh options
 * @param ao			ACIS options
 *
 * @return	Indicates success or failure.
 **/
DECL_VABRIDGE
outcome api_va_get_element_count(const va_mesh* in_mesh, int& element_count, va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);

/**
 * Types for 3D meshed elements
 */
enum VA_ELEMENT_TYPE {
    VA_SURFACE_TRI_LINEAR,      ///< Triangle connectivity, Serendipity Linear
    VA_SURFACE_TRI_PARABOLIC,   ///< Triangle connectivity, Serendipity Parabolic
    VA_SURFACE_TRI_LAGRANGE,    ///< Triangle connectivity, Lagrange Parabolic
    VA_SURFACE_QUAD_LINEAR,     ///< Quadrilateral connectivity, Serendipity Linear
    VA_SURFACE_QUAD_PARABOLIC,  ///< Quadrilateral connectivity, Serendipity Parabolic
    VA_SURFACE_QUAD_LAGRANGE,   ///< Quadrilateral connectivity, Lagrange Parabolic
    VA_TET_LINEAR,              ///< Tetrahedron connectivity, Serendipity Linear
    VA_TET_PARABOLIC,           ///< Tetrahedron connectivity, Serendipity Parabolic
    VA_TET_LAGRANGE,            ///< Tetrahedron connectivity, Lagrange Parabolic
    VA_PYR_LINEAR,              ///< Pyramid connectivity, Serendipity Linear
    VA_PYR_PARABOLIC,           ///< Pyramid connectivity, Serendipity Parabolic
    VA_PYR_LAGRANGE             ///< Pyramid connectivity, Lagrange Parabolic
};

/**
 * Gets the type of the element, the number of faces, edges, and nodes in the element,
 * and an array of the nodes in the element.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Available.
 *
 * @param in_mesh       (input) Mesh created by Mesher
 * @param element_index (input) The index of the element to get information about
 * @param elem_type     (output) The type of the element
 * @param face_count    (output) Number of faces in the element
 * @param edge_count    (output) Number of edges in the element
 * @param node_count    (output) Number of nodes in the element
 * @param node_array    (output) Node indices array
 * @param msopts        (Optional) Mesh options
 * @param ao            ACIS options
 *
 * @return  Indicates success or failure.
 **/
DECL_VABRIDGE
outcome api_va_get_element_data(const va_mesh* in_mesh, const int element_index, VA_ELEMENT_TYPE& elem_type, int& face_count, int& edge_count, int& node_count, int node_array[14], va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);
/**
 * Gets the nodes in a mesh edge
 *
 * @role For a linear mesh, the edges have two nodes, for a parabolic edge there are
 * three nodes; the first and last are the end points and the second is the midpoint.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Available.
 *
 * @param in_mesh       (input) Mesh created by Mesher
 * @param element_index (input) The index of the element to get information about
 * @param edge_index    (input) The index of the edge to get information about
 * @param node_count    (output) Number of nodes in the edge
 * @param node_array    (output) Array of integers to hold the node indices
 * @param msopts        (Optional) Mesh options
 * @param ao            (input) ACIS options
 *
 * @return Indicates success or failure.
 **/
DECL_VABRIDGE
outcome api_va_get_edge_nodes(const va_mesh* in_mesh, const int element_index, const int edge_index, int& node_count, int node_array[3], va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);
/**
 * Types for meshed faces
 *
 */
enum VA_FACE_TYPE {
    VA_FACE_TRI_LINEAR,      ///< Triangle connectivity, Serendipity Linear
    VA_FACE_TRI_PARABOLIC,   ///< Triangle connectivity, Serendipity Parabolic
    VA_FACE_TRI_LAGRANGE,    ///< Triangle connectivity, Lagrange Parabolic
    VA_FACE_QUAD_LINEAR,     ///< Quadrilateral connectivity, Serendipity Linear
    VA_FACE_QUAD_PARABOLIC,  ///< Quadrilateral connectivity, Serendipity Parabolic
    VA_FACE_QUAD_LAGRANGE    ///< Quadrilateral connectivity, Lagrange Parabolic
};
/**
 * Gets the nodes in a mesh element face
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Available.
 *
 * @param in_mesh 		(input) Mesh created by Mesher
 * @param element_index (input) The index of the element to get information about
 * @param face_index	(input) The index of the face to get information about
 * @param face_type	    (output) The type of the face
 * @param node_count	(output) Number of nodes in the <tt>node_array</tt>
 * @param node_array	(output) Array of integers to hold the node indices
 * @param msopts        (Optional) Mesh options
 * @param ao			ACIS options
 *
 * @return	Indicates success or failure.
 **/
DECL_VABRIDGE
outcome api_va_get_face_nodes(const va_mesh* in_mesh, const int element_index, const int face_index, VA_FACE_TYPE& face_type, int& node_count, int node_array[9], va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);

/**
 * Gets ACIS Faceter refinement.
 *
 *  @journal Available.
 *
 * @param in_mesh (input) Pointer to %surface mesh object
 * @param ref (output) Pointer to REFINEMENT entity, used to control the ACIS Faceter
 * @param ao (input) ACIS Options
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_faceter_refinement(const va_surfmesh* in_mesh, REFINEMENT*& ref, AcisOptions* ao = NULL);
/**
 * Gets the elements associated with an entity.
 *
 * @role For any given mesh, the number of elements associated to an entity varies from model to
 * model. This API will allocate (using <tt>ACIS_NEW []</tt>) enough space to hold an array of
 * those elements, returning the total of elements in the process.
 * It is the responsibility of the caller to delete the memory allocated.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Not Available
 *
 * @param in_mesh       Pointer to mesh object
 * @param ent           Pointer to ACIS ENTITY. Must be a VERTEX, EDGE, FACE, or 3D CELL.
 * @param elem_count    (output) total number of elements associated with given entity
 * @param elem_array    (output) Indices of those elements associated with given entity
 * @param msopts        (Optional) Mesh options
 * @param ao            ACIS options
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_elements(const va_mesh* in_mesh, const ENTITY* ent, int& elem_count, int*& elem_array, va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);
/**
 * Gets the nodes associated with an entity.
 *
 * @role For any given mesh, the number of nodes associated to an entity varies from model to
 * model. This API will allocate (using <tt>ACIS_NEW []</tt>) enough space to hold an array of
 * those elements, returning the total of elements in the process.
 * It is the responsibility of the caller to delete the memory allocated.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Not Available
 *
 * @param in_mesh       Pointer to mesh object
 * @param ent           Pointer to ACIS ENTITY
 * @param node_count    (output) Total number of nodes associated with given entity
 * @param node_array    (output) Indices of those nodes associated with given entity
 * @param msopts        (Optional) Mesh options
 * @param ao            ACIS options
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_nodes(const va_mesh* in_mesh, const ENTITY* ent, int& node_count, int*& node_array, va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);

/**
 *  Gets the 3D CELL associated with a particular element.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Not Available
 *
 * @param in_mesh       Pointer to mesh object
 * @param elem_index    Element index
 * @param feat_index    Unused
 * @param ent           (output) Pointer to ACIS 3D CELL
 * @param msopts        (Optional) Mesh options
 * @param ao            ACIS options
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_entity(const va_mesh* in_mesh, const int elem_index, const int feat_index, CELL*& ent, va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);
/**
 *  Gets the FACE associated with a particular element, given a face of the element.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Not Available
 *
 * @param in_mesh       Pointer to mesh object
 * @param elem_index    Element index
 * @param feat_index    Face index in the mesh element (Note: 1 based)
 * @param ent           (output) Pointer to ACIS FACE
 * @param msopts        (Optional) Mesh options
 * @param ao            ACIS options
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_entity(const va_mesh* in_mesh, const int elem_index, const int feat_index, FACE*& ent, va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);
/**
 * Gets the EDGE associated with a particular element, given an edge of the element.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Not Available
 *
 * @param in_mesh       Pointer to mesh object
 * @param elem_index    Element index
 * @param feat_index    Edge index in the mesh element (Note: 1 based)
 * @param ent           (output) Pointer to ACIS EDGE
 * @param msopts        (Optional) Mesh options
 * @param ao            ACIS options
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_entity(const va_mesh* in_mesh, const int elem_index, const int feat_index, EDGE*& ent, va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);
/**
 * Gets the VERTEX associated with a particular element, given a node in the element.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Not Available
 *
 * @param in_mesh       Pointer to mesh object
 * @param elem_index    Element index
 * @param feat_index    Node index (requires global node index)
 * @param ent           (output) Pointer to ACIS VERTEX
 * @param msopts        (Optional) Mesh options
 * @param ao            ACIS options
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_entity(const va_mesh* in_mesh, const int elem_index, const int feat_index, VERTEX*& ent, va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);
/**
 * Gets all entities associated with a particular node.
 *
 * The default behavior is to query the VKI connect object for the result of
 * the meshing operation; that is the output mesh. The VKI connect object for
 * the input geometry can be queried by setting the <tt>useInternalConnect</tt>
 * flag in the <tt>va_base_mesh_options</tt> arguement to <tt>TRUE</tt>.
 *
 * @journal Not Available
 *
 * @param in_mesh
 * Pointer to mesh object
 * @param node_index
 * Global node index
 * @param entity_type
 * Type of entity filter (<tt>FACE_ID</tt>, <tt>EDGE_ID</tt> or <tt>VERTEX_ID</tt>).
 * @param elist
 * (output) List of ENTITYs associated with given node
 * @param msopts
 * (Optional) Mesh options
 * @param ao
 * ACIS options
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_node_entities(const va_mesh* in_mesh, const int node_index, const int entity_type, ENTITY_LIST& enlist, va_base_mesh_options* msopts = NULL, AcisOptions* ao = NULL);

/**
 * @brief Gets current mesh input options.
 *
 * @journal Not Available
 *
 * @param in_mesh    Pointer to mesh object
 * @param msopts     (output) Current mesh input options (used to generate a mesh)
 * @param ao         ACIS options
 *
 * @return Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_mesh_options(const va_mesh* in_mesh, va_base_mesh_options*& msopts, AcisOptions* ao = NULL);

/**
 * @brief Creates a file representing the given mesh.
 *
 * @role This API function exports the given mesh to the given file name
 * using the specified file format. Supported file formats include:
 * <ul>
 * <li><tt>SYS_ASCII</tt>:            ASCII format</li>
 * <li><tt>SYS_BINARY</tt>:           Binary format</li>
 * <li><tt>SYS_ABAQUS_INPUT</tt>:     Write to ABAQUS input file</li>
 * <li><tt>SYS_ANSYS_INPUT</tt>:      Write to ANSYS input file</li>
 * <li><tt>SYS_LSTC_INPUT</tt>:       Write to LS-DYNA input file</li>
 * <li><tt>SYS_NASTRAN_BULKDATA</tt>: Write to NASTRAN Bulk Data file</li>
 * <li><tt>SYS_PATRAN_NEUTRAL</tt>:   Write to MSC/Patran Neutral file</li>
 * <li><tt>SYS_SDRC_UNIVERSAL</tt>:   Write to SDRC/IDEAS Universal file</li>
 * </ul>
 *
 * The symbols for these file formats are located in <tt>base/basedefs.h</tt>.
 *
 * @journal Not Available
 *
 * @param p_mesh
 * (input) Pointer to mesh object.
 * @param file_name
 * (input) Output file name. Contains full path and file suffix.
 * @param file_type
 * (input) Output file type.
 * @param ao
 * (input) ACIS options object.
 *
 * @return
 * Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_export_mesh(const va_mesh* p_mesh, const char* file_name, int file_type, AcisOptions* ao = NULL);

/**
 * @brief Specifies the type of check to perform and returns the check results.
 *
 * @role This class is part of the interface to api_va_check_mesh.
 * It contains the type of element check to perform and an array
 * of double values (created on the heap by the constructor) that
 * contains the check results.  The size of the results array is the
 * number of elements in the mesh being checked. The contents of the
 * array are the values for the specified type of check for each mesh element.
 *
 * The symbols for the types of checks are located in <tt>vis/elemchk.h</tt>.
 */
class mesh_check_options {
    int check_type;
    double* check_results;

  public:
    /**
     * Constructor.
     */
    mesh_check_options(int type, int size): check_results(0) {
        check_type = type;
        if(size > 0) check_results = ACIS_NEW double[size];
    }

    /**
     * Destructor.
     */
    ~mesh_check_options() {
        if(check_results) ACIS_DELETE[] STD_CAST check_results;
    }

    /**
     * Returns the type of check to perform.
     */
    int get_check_type() const { return check_type; }

    /**
     * Returns the array of checking results.
     */
    double* get_check_results() const { return check_results; }

    /**
     * Sets the value of the <tt>check_type</tt> parameter.
     *
     * @param type
     * the type of check to perform.
     */
    void set_check_type(int type) { check_type = type; }

    /**
     * Sets the value of the <tt>check_results</tt> parameter.
     *
     * @param results
     * the array of check results.
     */
    void set_check_results(double* results) { check_results = results; }
};

/**
 * @brief Checks the quality of the given mesh.
 *
 * @role This API function checks the quality of the given mesh
 * given a specific quality metric. The quality metric is specified
 * using the mesh_check_options object. The values for the given quality
 * metric for each mesh element are returned in the results array in the
 * mesh_check_options object.
 *
 * @journal Not Available
 *
 * @param p_mesh
 * (input) Pointer to a mesh object.
 * @param mco
 * (input) The mesh_check_options object.
 * @param ao
 * (input) ACIS options object.
 *
 * @return
 * Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_check_mesh(const va_mesh* p_mesh, mesh_check_options& mco, AcisOptions* ao = NULL);

/**
 * @brief Records an integer meshing parameter value.
 *
 * @role This API function records an integer parameter value in a mesh options
 * object, so it can be set in a mesh object before a mesh generation operation.
 *
 * The symbols for the parameters numbers and values are described in the VKI
 * documentation for the various types of mesh objects. For example, refer to the
 * SurfMesh documentation for <tt>vis_SurfMeshSetParamd</tt> and <tt>vis_SurfMeshSetParami</tt>
 * for %surface mesh control parameters.
 *
 * @journal Not Available
 *
 * @param param_num
 * (input) Parameter number, specifies which meshing parameter to set.
 * @param param_value
 * (input) The new value of the specified parameter.
 * @param mesh_opts
 * (input) Pointer to a mesh options object that records several meshing parameters.
 * @param ao
 * (input) ACIS options object.
 *
 * @return
 * Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_set_integer_meshing_parameter(int param_num, int param_value, va_base_mesh_options* mesh_opts, AcisOptions* ao = NULL);

/**
 * @brief Records a double meshing parameter value.
 *
 * @role This API function records a double parameter value in a mesh options
 * object, so it can be set in a mesh object before a mesh generation operation.
 *
 * The symbols for the parameters numbers and values are described in the VKI
 * documentation for the various types of mesh objects. For example, refer to the
 * SurfMesh documentation for <tt>vis_SurfMeshSetParamd</tt> and <tt>vis_SurfMeshSetParami</tt>
 * for %surface mesh control parameters.
 *
 * @journal Not Available
 *
 * @param param_num
 * (input) Parameter number, specifies which meshing parameter to set.
 * @param param_value
 * (input) The new value of the specified parameter.
 * @param mesh_opts
 * (input) Pointer to a mesh options object that records several meshing parameters.
 * @param ao
 * (input) ACIS options object.
 *
 * @return
 * Indicates success or failure.
 */
DECL_VABRIDGE outcome api_va_set_double_meshing_parameter(int param_num, double param_value, va_base_mesh_options* mesh_opts, AcisOptions* ao = NULL);

/** @}*/

// ***************************************************************
//   The following declarations were extracted from vabridge3D.h
// ***************************************************************

/**
 * @defgroup 3Dmesh Advanced Operations
 * @ingroup MeshTop
 *
 * @addtogroup 3Dmesh
 * @brief Access to VKI mesh handles.
 * @{
 */

/**
 * Get access to underlying VKI functionality for Surface Mesh.
 *
 * This function returns a vis_Connect object and a vis_SurfMesh object.
 * The vis_Connect object will be either the input or output Connect object.
 * The input Connect object (the "internal" Connect object) is the Connect object
 * used to generate the %surface mesh; i.e., it contains the input tesselation mesh.
 * The output Connect object contains the %surface mesh. The default behavior is
 * to return the output Connect object. The mesh options object can be used to
 * specify the input Connect object.
 *
 * @param p_mesh        Pointer to an instance of the va_surfmesh bridge object
 * @param vki_connect   Output pointer to VKI's mesh connectivity manager
 * @param vki_mesh      Output pointer to VKI's own vis_SurfMesh object
 * @param mopts         Mesh options object.
 * @param ao            ACIS Options
 * @return              Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_vki_handles(const va_surfmesh* p_mesh, vis_Connect*& vki_connect, vis_SurfMesh*& vki_mesh, va_base_mesh_options* mopts = NULL, AcisOptions* ao = NULL);

/**
 * Get access to underlying VKI functionality for Tet Mesh.
 *
 * This function returns a vis_Connect object and a vis_TetMesh object.
 * The vis_Connect object will be either the input or output Connect object.
 * The input Connect object (the "internal" Connect object) is the Connect object
 * used to generate the tet mesh; i.e., it contains the input %surface mesh.
 * The output Connect object contains the tet mesh. The default behavior is
 * to return the output Connect object. The mesh options object can be used to
 * specify the input Connect object.
 *
 * @param p_mesh        Pointer to an instance of the va_tetmesh bridge object
 * @param vki_connect   Output pointer to VKI's mesh connectivity manager
 * @param vki_mesh      Output pointer to VKI's own vis_TetMesh object
 * @param mopts         Mesh options object.
 * @param ao            ACIS Options
 * @return              Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_vki_handles(const va_tetmesh* p_mesh, vis_Connect*& vki_connect, vis_TetMesh*& vki_mesh, va_base_mesh_options* mopts = NULL, AcisOptions* ao = NULL);

/**
 * Get access to underlying VKI functionality for Vol Mesh.
 *
 * This function returns a vis_Connect object and a vis_VolMesh object.
 * The vis_Connect object will be either the input or output Connect object.
 * The input Connect object (the "internal" Connect object) is the Connect object
 * used to generate the vol mesh; i.e., it contains the input %surface mesh.
 * The output Connect object contains the vol mesh. The default behavior is
 * to return the output Connect object. The mesh options object can be used to
 * specify the input Connect object.
 *
 * @param p_mesh        Pointer to an instance of the va_volmesh bridge object
 * @param vki_connect   Output pointer to VKI's mesh connectivity manager
 * @param vki_mesh      Output pointer to VKI's own vis_VolMesh object
 * @param mopts         Mesh options object.
 * @param ao            ACIS Options
 * @return              Indicates success or failure.
 */
DECL_VABRIDGE
outcome api_va_get_vki_handles(const va_volmesh* p_mesh, vis_Connect*& vki_connect, vis_VolMesh*& vki_mesh, va_base_mesh_options* mopts = NULL, AcisOptions* ao = NULL);

/** @}*/
#endif
