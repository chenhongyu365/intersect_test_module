/*******************************************************************/
/*    Copyright (c) 1989-2020 by Spatial Corp.                     */
/*    All rights reserved.                                         */
/*    Protected by U.S. Patents 5,257,205; 5,351,196; 6,369,815;   */
/*                              5,982,378; 6,462,738; 6,941,251    */
/*    Protected by European Patents 0503642; 69220263.3            */
/*    Protected by Hong Kong Patent 1008101A                       */
/*******************************************************************/
/**********************************************************************/
/* Declare a class to control output of the IHL.                      */
/**********************************************************************/
#if ! defined ( IHLOUTP_INCLUDE )
/**********************************************************************/
#include "logical.h"
#include "dcl_ihl.h"
#include "ihl_seg.hxx"
/** 
 * @file ihloutp.hxx
 * @CAA2Level L1
 * @CAA2Usage U2
 *! \addtogroup IHLAPI
 *  \brief Declared at <ihloutp.hxx>
 *  @{
 */
/**
 * @nodoc
 */
typedef enum {
      NONE,
      NEXT, //join as next to current one
      PREV //join as previous to current one
	} IHL_SEGMENT_JOIN_TYPE;

/**********************************************************************/
/**
 * Defines a class to control output from IHL.
 * <br>
 * <b>Role:</b> By deriving a child of this class, the application can control output from IHL.
 * (For example, the <tt>IHL_STDOUT_MANAGER</tt> class is a child of <tt>IHL_OUTPUT_MANAGER</tt>, whose methods have
 * been written to define how output is processed in the default case where the application has
 * not yet specified any output manager.)
 * <br><br>
 * The application controls what happens to the hidden line output by overriding the
 * <tt>announce_2D_segment</tt>, <tt>announce_3D_segment</tt>, and <tt>announce_next_object</tt> methods.
 * <br><br>
 * The application activates a particular output manager by calling @href api_ihl_set_output_manager
 * and passing it an instance of the <tt>IHL_OUTPUT_MANAGER</tt> class.
 * <br><br>
 * The application specifies the type of hidden line output needed by calling the <tt>need_3D_coordinates</tt>,
 * <tt>need_hidden_segments</tt>, and <tt>need_interior_segments</tt> methods.
 * <br><br>
 * Hidden line output is then generated by calling the @href api_ihl_compute_from_meshes function and
 * the resulting output is handled by the active output manager.
 * <br><br>
 * The <tt>IHL_OUTPUT_MANAGER</tt> class works similarly to the output manager of the faceter.
 */
class DECL_IHL IHL_OUTPUT_MANAGER : public ACIS_OBJECT
{
public :
/**
 * C++ allocation constructor requests memory for this object but does not populate it.
 */
    IHL_OUTPUT_MANAGER()  {}
/**
 * C++ destructor for <tt>IHL_OUTPUT_MANAGER</tt> which deallocates memory.
 */
    ~IHL_OUTPUT_MANAGER() {}
/**
 * Overrides this method.
 * <br><br>
 * <b>Role:</b> Returns <tt>TRUE</tt> if you wish IHL to output 3D coordinates in the line segments rather than 2D. The default is <tt>FALSE</tt>.
 */
    virtual logical need_3D_coordinates();
/**
 * Overrides this method.
 * <br><br>
 * <b>Role:</b> Returns <tt>TRUE</tt> if you wish IHL to output visible and nonvisible line segments. The default is <tt>FALSE</tt>.
 */
    virtual logical need_hidden_segments();
/**
 * Overrides this method.
 * <br><br>
 * <b>Role:</b> Returns <tt>TRUE</tt> if you wish IHL to output line segments interior to a face. The default is <tt>FALSE</tt>.
 */
    virtual logical need_interior_segments();
/**
 * Overrides this method.
 * <br><br>
 * <b>Role:</b> Returns <tt>TRUE</tt> if you wish IHL to not calculate hidden line and only output silhouette segments. The default is <tt>FALSE</tt>.
 */
    virtual logical need_no_hidden_calc();
/**
 * Gets the current segment which is newly allocated.
 */
    virtual IHL_SEGMENT * get_cur_seg() { return NULL; }

    // set current segment just newly allocated
/**
 * Sets the current segment which is newly allocated.
 * <br><br>
 * @param seg
 * pointer to segment.
 */
	virtual void  set_cur_seg(IHL_SEGMENT * seg) { SPAUNUSED(seg) }
/**
 * Adds the segment to the segment list.
 * <br><br>
 * @param seg
 * pointer to segment.
 */
    virtual void  add_seg_to_list(IHL_SEGMENT * seg) { SPAUNUSED(seg) }
/**
 * Announces to the draw routine that IHL will compute line segments for the next object in the list of bodies (meshes).
 * <br><br>
 * <b>Role:</b> It is called once for each body/mesh but it is the responsibility of the derived
 * class to keep track of the bodies. 
 */
    virtual void announce_next_object();
/**
 * Announces to the draw routine that a 2D segment needs to be drawn.
 * <br><br>
 * @param lseg
 * array of 4 doubles with start/end 2D-coordinates.
 * @param l3seg
 * array of 6 doubles with start/end 3D-coordinates.
 * @param lseguv
 * array of 4 doubles with start/end uv-coordinates.
 * @param lsegt
 * array of 2 doubles with start/end tpars.
 * @param tag
 * void* from the corresponding PE_EDGE.
 * @param fVisible
 * TRUE if segment is visible.
 * @param tpar
 * tpar from begin to end of segment(silh point).
 * @param onsil
 * if segment on silhouette edge.
 * @param join
 * how to connect to cur_seg.
 */
    virtual void announce_2D_segment(
            double  *lseg,           // array of 4 doubles with start/end
                                     // 2D-coordinates
            double  *l3seg,          // array of 6 doubles with start/end
                                     // 3D-coordinates
			double  *lseguv,         // array of 4 doubles with start/end
                                     // uv-coordinates
            double  *lsegt,          // array of 2 doubles with start/end
                                     // tpars
            void    *tag,            // void* from the corresponding PE_EDGE
            logical fVisible, 		 // TRUE if segment is visible
            double tpar,				// tpar from begin to end of segment(silh point)
            logical onsil,            //Segment on silhouette
			IHL_SEGMENT_JOIN_TYPE join); // how to connect to cur_seg
/**
 * Announces to the draw routine that a 3D segment needs to be drawn.
 * <br><br>
 * @param lseg
 * array of 6 doubles with start/end.
 * @param tag
 * void* from the corresponding PE_EDGE.
 * @param fVisible
 * TRUE if segment is visible.
 */
    virtual void announce_3D_segment(
            double  *lseg,           // array of 6 doubles with start/end
                                     // 3D-coordinates
            void    *tag,            // void* from the corresponding PE_EDGE
            logical fVisible );      // TRUE if segment is visible
};

/**********************************************************************/
#define  IHLOUTP_INCLUDE
/* @} */
#endif
/**********************************************************************/
