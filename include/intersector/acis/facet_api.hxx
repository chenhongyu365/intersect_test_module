/*******************************************************************/
/*    Copyright (c) 1989-2020 by Spatial Corp.                     */
/*    All rights reserved.                                         */
/*    Protected by U.S. Patents 5,257,205; 5,351,196; 6,369,815;   */
/*                              5,982,378; 6,462,738; 6,941,251    */
/*    Protected by European Patents 0503642; 69220263.3            */
/*    Protected by Hong Kong Patent 1008101A                       */
/*******************************************************************/
/**
* ACIS Compound
*/
#if !defined(FACET_API_HXX)
#define FACET_API_HXX
#include "dcl_compound.h"
#include "api.hxx"
#include "entity_handle.hxx"
#include "idx_mesh.hxx"
#include "position_array.hxx"
#include "int_array.hxx"
#include "vector_array.hxx"
#include "get_tri_facet_opt.hxx"
/**
 * @file facet_api.hxx
 * @CAA2Level L1
 * @CAA2Usage U1
 * \addtogroup ACISCOMPOUND
 * @{
 */
/**
* <summary>Facet the given BODY.</summary>
* <param name="entity">Input entity_handle of type BODY.</summary>
* <param name="ao"ACIS Options.</param>
*/
outcome DECL_COMPOUND api_facet_body(entity_handle* entity, AcisOptions* ao = NULL);
/**
* <summary>Gets the 3D points off the EDGE, generated by the faceter.</summary>
* <param name="entity">Input entity_handle of type EDGE.</summary>
* <param name="points">List of 3D points.</summary>
* <param name="apply_owner_transf">Apply the owner's tranform.</summary>
* <param name="ao"ACIS Options.</param>
*/ 
DECL_COMPOUND outcome api_get_facet_edge_points(entity_handle* entity, 
												SPAPOSITION_ARRAY*&   out_points,
												const logical& apply_owner_transf,
												AcisOptions*   ao = NULL);
/**
* <summary>Gets the mesh information from faceted entity.</summary>
* <param name="entity">Input entity_handle of type EDGE.</summary>
* <param name="out_points">List of 3D points.</summary>
* <param name="index_array">Connectivity sequence, three for each triangle.</summary>
* <param name="out_normals">List of 3D vectors.</summary>
* <param name="apply_owner_transf">Apply the owner's tranform.</summary>
* <param name="get_opts">Get options.</summary>
* <param name="ao"ACIS Options.</param>
*/ 
DECL_COMPOUND outcome api_get_facet_face_tri_points(entity_handle* entity, 
													SPAPOSITION_ARRAY*&   out_points,
													INT_ARRAY*& index_array,
													SPAVECTOR_ARRAY*& out_normals,
													const logical& apply_owner_transf, 
													const get_tri_facet_options* get_opts = NULL,
													AcisOptions*   ao = NULL);

/**
* <summary>Reset entity REFINEMENT.</summary>
* <param name="entity">Input ENTITY.</summary>
* <param name="ao"ACIS Options.</param>
*/
DECL_COMPOUND outcome api_reset_entity_refinement(entity_handle* entity, AcisOptions*   ao = NULL);
/**
* <summary>Get SEQUENTIAL_MESH associated with input entity_handle.</summary>
* <param name="entity">Input entity_handle.</summary>
* <param name="mesh">SEQUENTIAL_MESH associated.</summary>
* <param name="ao"ACIS Options.</param>
*/
DECL_COMPOUND outcome api_get_sequential_mesh(entity_handle* entity, SEQUENTIAL_MESH*& mesh, AcisOptions*   ao = NULL);
/**
* <summary>Delete ENTITY facets.</summary>
* <param name="entity">Input entity_handle of type BODY.</summary>
* <param name="applyToDescendants">Delete facets additionally on EntityCli descendents.</summary>
* <param name="ao"ACIS Options.</param>
*/
DECL_COMPOUND outcome api_delete_entity_facets(entity_handle* entity, const logical& apply_to_descendents, AcisOptions*   ao = NULL);

/** @} */
#endif
